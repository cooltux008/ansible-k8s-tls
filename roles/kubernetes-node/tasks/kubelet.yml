---
- include_tasks: "{{ ansible_distribution }}/{{ ansible_distribution_major_version }}/kubelet_depends.yml"

- name: create kubelet dir 
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  loop: 
    - /var/lib/kubelet
    - /etc/kubernetes/manifests

- name: fetch kubelet binary to PATH(/usr/local/bin)
  get_url:
    url: "{{ kubernetes_binary_url }}/kubelet"
    dest: /usr/local/bin
    owner: root
    group: root
    mode: 0755
  tags: fetch_kubelet
  register: download
  until: download is not failed
  retries: 5
  notify: restart kubelet

- name: container engine is docker ?
  stat:
    path: /var/run/docker.sock
  register: docker

- name: container engine is pouch ?
  stat:
    path: /var/run/pouchcri.sock
  register: pouch

- name: container engine is containerd ?
  stat:
    path: /var/run/containerd/containerd.sock
  register: containerd

- name: container engine is crio ?
  stat:
    path: /var/run/crio/crio.sock
  register: crio

- name: create kubelet configuration with docker
  template: 
    src: "{{ kubernetes_version.split('.')[:2] | join('.') }}/{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0644
  loop:
    - { src: 'config.yaml.j2', dest: '/etc/kubernetes/config.yaml' }
    - { src: 'kubelet.j2', dest: '/etc/kubernetes/kubelet' }
    - { src: 'kubelet.service.j2', dest: '/lib/systemd/system/kubelet.service' }
  notify: restart kubelet
  when: docker.stat.exists

- name: create kubelet configuration with docker
  template: 
    src: "{{ kubernetes_version.split('.')[:2] | join('.') }}/{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0644
  loop:
    - { src: 'config.yaml.j2', dest: '/etc/kubernetes/config.yaml' }
    - { src: 'kubelet-pouch.j2', dest: '/etc/kubernetes/kubelet' }
    - { src: 'kubelet.service.j2', dest: '/lib/systemd/system/kubelet.service' }
  notify: restart kubelet
  when: pouch.stat.exists

- name: create kubelet configuration with containerd
  template: 
    src: "{{ kubernetes_version.split('.')[:2] | join('.') }}/{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0644
  loop:
    - { src: 'config.yaml.j2', dest: '/etc/kubernetes/config.yaml' }
    - { src: 'kubelet-containerd.j2', dest: '/etc/kubernetes/kubelet' }
    - { src: 'kubelet.service.j2', dest: '/lib/systemd/system/kubelet.service' }
  notify: restart kubelet
  when: containerd.stat.exists

- name: create kubelet configuration with crio
  template: 
    src: "{{ kubernetes_version.split('.')[:2] | join('.') }}/{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0644
  loop:
    - { src: 'config.yaml.j2', dest: '/etc/kubernetes/config.yaml' }
    - { src: 'kubelet-crio.j2', dest: '/etc/kubernetes/kubelet' }
    - { src: 'kubelet.service.j2', dest: '/lib/systemd/system/kubelet.service' }
  notify: restart kubelet
  when: crio.stat.exists

- name: systemd daemon-reload
  systemd: 
    daemon-reload: yes

- name: start kubelet
  service: 
    name: kubelet
    state: started 
    enabled: yes
